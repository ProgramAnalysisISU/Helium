#+TITLE: Corebench Detail

Corebench contains 4 programs: coreutils, findutils, grep, make.

* coreutils

** 1. rm
| fixing commit | bug              | symptom                                       | bug report               |
|---------------+------------------+-----------------------------------------------+--------------------------|
| 5ee7d8f5      | wrong assignment | wrong behavior (delete file that should not)] | http://bugs.gnu.org/9308 |

Patch:
#+BEGIN_SRC diff
index 4b87c12..7a51eef 100644
--- a/src/rm.c
+++ b/src/rm.c
@@ -244,7 +244,7 @@ main (int argc, char **argv)
           break;
 
         case 'I':
-          x.interactive = RMI_NEVER;
+          x.interactive = RMI_SOMETIMES;
           x.ignore_missing_files = false;
           prompt_once = true;
           break;
#+END_SRC

The bug is, for the util =rm=, the man page says =--interactive=once= and =-I= should be the same.
But the bug is they are not consistent, for unwritable file.
The =-I= version doees not prompt warning.

test:
#+BEGIN_EXAMPLE
> $ LC_ALL=C rm --interactive=once file1 file2 file3 file4
> rm: remove all arguments? y
> rm: remove write-protected regular empty file `file1'? y

> $ LC_ALL=C rm -I file1 file2 file3 file4
> rm: remove all arguments? y

Now rm does not prompt for the unwritable file "file1".
#+END_EXAMPLE

The symptom is, rm a unwritable file (with option ---presume-inputtty, I guess is confirm not), will remove that file.

** 2. od
| fixing commit | bug        | symptom     | bug report                |
|---------------+------------+-------------+---------------------------|
| 51a8f707      | wrong type | wrong value | http://bugs.gnu.org/14530 |

This seems to be a type resolution problem, according to the patch, which only change the type.

#+BEGIN_SRC diff
index e8cab46..1c23401 100644
--- a/src/od.c
+++ b/src/od.c
@@ -400,7 +400,7 @@ N (size_t fields, size_t blank, void const *block,                      \
    char const *FMT_STRING, int width, int pad)                          \
 {                                                                       \
   T const *p = block;                                                   \
-  size_t i;                                                             \
+  uintmax_t i;                                                             \
   int pad_remaining = pad;                                              \
   for (i = fields; blank < i; i--)                                      \
     {                                                                   \
@@ -456,7 +456,7 @@ print_named_ascii (size_t fields, size_t blank, void const *block,
                    int width, int pad)
 {
   unsigned char const *p = block;
-  size_t i;
+  uintmax_t i;
   int pad_remaining = pad;
   for (i = fields; blank < i; i--)
     {
@@ -487,7 +487,7 @@ print_ascii (size_t fields, size_t blank, void const *block,
              int pad)
 {
   unsigned char const *p = block;
-  size_t i;
+  uintmax_t i;
   int pad_remaining = pad;
   for (i = fields; blank < i; i--)
     {
#+END_SRC

And the corebench script is from the patch

#+BEGIN_SRC shell
fail=0
printf "   x\n" > exp
$versiondir/src/od -a -w65537 -An $TDIR/g > out
compare exp out ||  { echo FAIL_1; fail=1; }
#+END_SRC

Thus the symptom is wrong value.

** 3. cut (bad)
| fixing commit | bug                | symptom  | bug report |
|---------------+--------------------+----------+------------|
| b54b47f9      | overlapping ranges | Not sure | Not useful |
Patch:
#+BEGIN_SRC diff
index b347b30..9501b3a 100644
--- a/src/cut.c
+++ b/src/cut.c
@@ -496,9 +496,9 @@ set_fields (const char *fieldstr)
           if (rp[j].lo <= rp[i].hi)
             {
               rp[i].hi = MAX (rp[j].hi, rp[i].hi);
-              memmove (rp + j, rp + j + 1,
-                       (n_rp - j - 1) * sizeof (struct range_pair));
-              --n_rp;
+              memmove (rp + j, rp + j + 1, (n_rp - j - 1) * sizeof *rp);
+              n_rp--;
+              j--;
             }
           else
             break;
#+END_SRC

Test
#+BEGIN_SRC shell
echo 1 > exp
(dd bs=1MB if=/dev/zero count=1 status=noxfer; echo '1') |
$versiondir/src/cut -b1-1000000,2-3,4-5,1000001 2>err | tail -c2 > out || fail=1 
compare exp out || fail=1
#+END_SRC

** 4. tail (bad, but has think point)
Well, something like tail, needs file to operate on.
We don't want to provide file as input, we only want to simulate this by intermediate input..?

Back to this bug, I don't understand.
#+BEGIN_QUOTE
tail: exit following by descriptor when no tailable file left
#+END_QUOTE

** 5. tail (bad)
| fixing commit | bug                              | symptom                 | bug report                                     |
|---------------+----------------------------------+-------------------------+------------------------------------------------|
| d461bfd2      | error message/logic modification | different error message | http://lists.gnu.org/.../2013-04/msg00003.html |

Patch:
#+BEGIN_SRC diff
index cdaecdd..3735757 100644
--- a/src/tail.c
+++ b/src/tail.c
@@ -294,9 +294,7 @@ With no FILE, or when FILE is -, read standard input.\n\
      fputs (_("\
       --pid=PID            with -f, terminate after process ID, PID dies\n\
   -q, --quiet, --silent    never output headers giving file names\n\
-      --retry              keep trying to open a file even when it is or\n\
-                             becomes inaccessible; useful when following by\n\
-                             name, i.e., with --follow=name\n\
+      --retry              keep trying to open a file if it is inaccessible\n\
 "), stdout);
      fputs (_("\
   -s, --sleep-interval=N   with -f, sleep for approximately N seconds\n\
@@ -2030,8 +2028,14 @@ parse_options (int argc, char **argv,
         }
     }
 
-  if (reopen_inaccessible_files && follow_mode != Follow_name)
-    error (0, 0, _("warning: --retry is useful mainly when following by name"));
+  if (reopen_inaccessible_files)
+    {
+      if (!forever)
+        error (0, 0, _("warning: --retry ignored; --retry is useful"
+                       " only when following"));
+      else if (follow_mode == Follow_descriptor)
+        error (0, 0, _("warning: --retry only effective for the initial open"));
+    }
 
   if (pid && !forever)
     error (0, 0,
@@ -2182,6 +2186,10 @@ main (int argc, char **argv)
          in this case because it would miss any updates to the file
          that were not initiated from the local system.
 
+         ok is false when one of the files specified could not be opened for
+         reading.  In this case and when following by descriptor,
+         tail_forever_inotify() cannot be used (in its current implementation).
+
          FIXME: inotify doesn't give any notification when a new
          (remote) file or directory is mounted on top a watched file.
          When follow_mode == Follow_name we would ideally like to detect that.
@@ -2193,7 +2201,8 @@ main (int argc, char **argv)
          is recreated, then we don't recheck any new file when
          follow_mode == Follow_name  */
       if (!disable_inotify && (tailable_stdin (F, n_files)
-                               || any_remote_file (F, n_files)))
+                               || any_remote_file (F, n_files)
+                               || (!ok && follow_mode == Follow_descriptor)))
         disable_inotify = true;
 
       if (!disable_inotify)
#+END_SRC

The report mention that the regression when using --retry opening a unaccessible file,
the tail stop immediately, instead of retry.
This might be the last line of change above.

** 6. cut (good)
| fixing commit | bug                 | symptom   | bug report                |
|---------------+---------------------+-----------+---------------------------|
| be7932e8      | access out of range | SEG FAULT | http://bugs.gnu.org/13627 |
Patch
#+BEGIN_SRC diff
index 36172c0..494aad7 100644
--- a/src/cut.c
+++ b/src/cut.c
@@ -530,7 +530,9 @@ set_fields (const char *fieldstr)
   if (output_delimiter_specified
       && !complement
       && eol_range_start
-      && max_range_endpoint && !is_printable_field (eol_range_start))
+      && max_range_endpoint
+      && (max_range_endpoint < eol_range_start
+          || !is_printable_field (eol_range_start)))
     mark_range_start (eol_range_start);
 
   free (rp);
#+END_SRC

Test
#+BEGIN_SRC shell
fail=0
printf "" > exp
cat exp | $versiondir/src/cut --output-d=: -b1,1234567890- > out || fail=1
compare exp out || fail=1
#+END_SRC

or just
#+BEGIN_EXAMPLE
echo "" | ./src/cut  --output-d=: -b1,1234567890-
#+END_EXAMPLE

This will gives error

** 7. seq (bad)
| fixing commit | bug | symptom                       | bug report                        |
|---------------+-----+-------------------------------+-----------------------------------|
| 2238ab57      |     | wrong value when 3rd arg is 1 | 	http://bugs.gnu.org/13525 |

Patch
#+BEGIN_SRC diff
index 5ad5fad..acbe235 100644
--- a/src/seq.c
+++ b/src/seq.c
@@ -565,11 +565,12 @@ main (int argc, char **argv)
      then use the much more efficient integer-only code.  */
   if (all_digits_p (argv[optind])
       && (n_args == 1 || all_digits_p (argv[optind + 1]))
-      && (n_args < 3 || STREQ ("1", argv[optind + 2]))
+      && (n_args < 3 || (STREQ ("1", argv[optind + 1])
+                         && all_digits_p (argv[optind + 2])))
       && !equal_width && !format_str && strlen (separator) == 1)
     {
       char const *s1 = n_args == 1 ? "1" : argv[optind];
-      char const *s2 = n_args == 1 ? argv[optind] : argv[optind + 1];
+      char const *s2 = argv[optind + (n_args - 1)];
       if (seq_fast (s1, s2))
         exit (EXIT_SUCCESS);
 #+END_SRC

** 8. seq (bad)
Output contains an unexpected newline.

** 9. seq (interesting)
Output has incorrect width for scientific notation input.
OK, can we generate the input that we know they are equivalent (such as 100, 1e2), and see if the result matches?

** 10. cp (Maybe)
=--no-preserve=mode= always return 1.
The correct behavior is to exit 1 conditionally.
But, we cannot handle this.. And if it is in main function, I replace every return to 35.
But wait, it is possible, see that patch:

#+BEGIN_SRC diff
--- a/src/copy.c
+++ b/src/copy.c
@@ -1153,8 +1153,8 @@ preserve_metadata:
     }
   else if (x->explicit_no_preserve_mode)
     {
-      set_acl (dst_name, dest_desc, 0666 & ~cached_umask ());
-      return_val = false;
+      if (set_acl (dst_name, dest_desc, 0666 & ~cached_umask ()) != 0)
+        return_val = false;
     }
   else if (omitted_permissions)
     {
#+END_SRC

** 11. cut (Interesting, memory leak)
memory leak
Avoid a redundant heap allocation.

#+BEGIN_SRC diff
index dc83072..de9320c 100644
--- a/src/cut.c
+++ b/src/cut.c
@@ -500,14 +500,13 @@ set_fields (const char *fieldstr)
       if (rp[i].hi > max_range_endpoint)
         max_range_endpoint = rp[i].hi;
     }
-  if (max_range_endpoint < eol_range_start)
-    max_range_endpoint = eol_range_start;
 
   /* Allocate an array large enough so that it may be indexed by
      the field numbers corresponding to all finite ranges
      (i.e. '2-6' or '-4', but not '5-') in FIELDSTR.  */
 
-  printable_field = xzalloc (max_range_endpoint / CHAR_BIT + 1);
+  if (max_range_endpoint)
+    printable_field = xzalloc (max_range_endpoint / CHAR_BIT + 1);
 
   qsort (rp, n_rp, sizeof (rp[0]), compare_ranges);
 
@@ -531,7 +530,8 @@ set_fields (const char *fieldstr)
 
   if (output_delimiter_specified
       && !complement
-      && eol_range_start && !is_printable_field (eol_range_start))
+      && eol_range_start
+      && max_range_endpoint && !is_printable_field (eol_range_start))
     mark_range_start (eol_range_start);
 
   free (rp);
#+END_SRC

#+BEGIN_SRC shell
fail=0
(ulimit -v 20000; : | $versiondir/src/cut -b2147483648- > err 2>&1) || fail=1
compare /dev/null err || fail=1
#+END_SRC

THINK: How to detect a memory leak?
Use valgrind?
OK, good! We can use valgrind, and valgrind is pretty good at reporting memory leak
(many developers are using it to trace whether the memory is reachable).
We keep getting more context, and finally, we found the memory is still leaking.

The important problem again is, how to resolve the query and decide the stop point?
We have the precise symptom, but we don't have a invariant.
No precondition, because no matter the input, it will leak.

Not so interesting?

** 12. cut
wrong output: do not print extraneous delimiters in some unusual cases

THINK: How to use wrong value?
One thing is to use clustering, e.g. every input is y = 2 * x,
except one is y=0 all the time, which might be the failure condition.

** 13. ls (interesting, color problem)
a04ddb8d
#+BEGIN_QUOTE
fix coloring of dangling symlinks in default listing mode
#+END_QUOTE

This is a wrong value, but pretty special wrong value: the color is different.
Well I would say this is hard to test, but the irrelevant should be a fit for Helium.
However, the old question remains, how to acquire an oracle?
Apparently we could not use the test case as oracle because it is for the whole program.
** 14. ls
color problem again.

#+BEGIN_QUOTE
color each symlink-to-relative-name in / properly
#+END_QUOTE


** 15. du
print out nothing!

#+BEGIN_QUOTE
Surprise!  "du -x non-DIR" would print nothing.
fix -x: don't ignore non-directory arguments
#+END_QUOTE

** 16. tail (bad)
Don't really understand this
#+BEGIN_QUOTE
tail --follow=name no longer implies --retry
#+END_QUOTE

** 17. cut (good)
Seg fault!

#+BEGIN_QUOTE
cut: don't segfault for large unbounded range
#+END_QUOTE

#+BEGIN_SRC diff
index 3f8e3e6..e2fe851 100644
--- a/src/cut.c
+++ b/src/cut.c
@@ -496,6 +496,8 @@ set_fields (const char *fieldstr)
       if (rp[i].hi > max_range_endpoint)
         max_range_endpoint = rp[i].hi;
     }
+  if (max_range_endpoint < eol_range_start)
+    max_range_endpoint = eol_range_start;
 
   /* Allocate an array large enough so that it may be indexed by
      the field numbers corresponding to all finite ranges
#+END_SRC

** 18. seq (bad)
#+BEGIN_QUOTE
seq: give a proper diagnostic for an invalid --format=% option
#+END_QUOTE

** 19. seq (interesting)
wrong value.

#+BEGIN_QUOTE
seq 10.8 0.1 10.95
#+END_QUOTE

Wait, the program like seq is good for Helium because it can infer relationship and abnormal one.

** 20. seq (bad)
number width problem.

** 21. cut (bad)
better diagnose

** 22. expr (interesting)
again the math problem, maybe good for oracle.

#+BEGIN_SRC diff
index 7a7745d..1b42cf6 100644
--- a/src/expr.c
+++ b/src/expr.c
@@ -356,7 +356,7 @@ toarith (VALUE *v)
 	while (*++cp);
 
 	free (v->u.s);
-	v->u.i = value * sign;
+	v->u.i = value;
 	v->type = integer;
 	return true;
       }
#+END_SRC

Test case
#+BEGIN_EXAMPLE
./expr 6 + -2  => 8
#+END_EXAMPLE

* findutils

** 23. fd leak
#+BEGIN_QUOTE
find: fix fd leak with --execdir option (bug#34976)
#+END_QUOTE

** 24. (bad)
#+BEGIN_QUOTE
Fix Savannah bug #29949, -execdir does not change working directory.
#+END_QUOTE

** 29. crash
#+BEGIN_QUOTE
Fixed Savannah bug #23663, crash in some locales for find -printf '%AX'
#+END_QUOTE

#+BEGIN_SRC diff
index 57e5199..685dd39 100644
--- a/find/pred.c
+++ b/find/pred.c
@@ -2101,7 +2101,6 @@ do_time_format (const char *fmt, const struct tm *p, const char *ns, size_t ns_s
 	  size_t i, n;
 	  size_t final_len = (buf_used 
 			      + 1u /* for \0 */
-			      - 1u /* because we don't need the initial underscore */
 			      + ns_size);
 	  buf = xrealloc (buf, final_len);
 	  altbuf = xmalloc (final_len);
@@ -2117,15 +2116,17 @@ do_time_format (const char *fmt, const struct tm *p, const char *ns, size_t ns_s
 	      && (2==n) && !isdigit((unsigned char)buf[i+n]))
 	    {
 	      const size_t end_of_seconds = i + n;
+	      const size_t suffix_len = buf_used-(end_of_seconds)+1;
 
 	      /* Move the tail (including the \0).  Note that this
 	       * is a move of an overlapping memory block, so we
 	       * must use memmove instead of memcpy.  Then insert
 	       * the nanoseconds (but not its trailing \0).
 	       */
+	      assert (end_of_seconds + ns_size + suffix_len == final_len);
 	      memmove (buf+end_of_seconds+ns_size,
 		       buf+end_of_seconds,
-		       buf_used-(end_of_seconds)+1);
+		       suffix_len);
 	      memcpy (buf+i+n, ns, ns_size);
 	    }
 	  else
#+END_SRC

** 33. assertion failure
#+BEGIN_QUOTE
(assertion failure on symlink loop)
#+END_QUOTE

** 34. core dump
#+BEGIN_QUOTE
coiredump when -regex ZZZ was the final test on the command line
#+END_QUOTE

#+BEGIN_SRC diff
index 4319d28..97d9778 100644
--- a/find/parser.c
+++ b/find/parser.c
@@ -1642,8 +1642,8 @@ insert_regex (char **argv, int *arg_ptr, const struct parser_table *entry, int r
 				      re);
   if (error_message)
     error (1, 0, "%s", error_message);
-  (*arg_ptr)++;
   our_pred->est_success_rate = estimate_pattern_match_rate(argv[*arg_ptr], 1);
+  (*arg_ptr)++;
   return true;
 }
#+END_SRC

Test
#+BEGIN_EXAMPLE
find_start p {. -maxdepth 0 -regex x }
#+END_EXAMPLE

** 37. hang
But the patch is too complicated.
#+BEGIN_QUOTE
Fixed SourceForge bug 12181 (find -H symlink-to-dir reports 'Too many Symbolic links')
and bug 12044 (find still hangs on dead NFS filesystems on Solaris)
#+END_QUOTE
* grep
** 42. heap overrun
#+BEGIN_QUOTE
dfa: fix the root cause of the heap overrun
#+END_QUOTE

** 45. sigsegv
#+BEGIN_QUOTE
dfa: fix sigsegv on multibyte character classes
#+END_QUOTE

** 51. infinite loop
#+BEGIN_QUOTE
dfa: fix sigsegv on multibyte character classes
#+END_QUOTE

** 52. Segfault
#+BEGIN_QUOTE
grep: don't segfault upon use of --include or --exclude* options
#+END_QUOTE

| fixing commit | bug  | symptom       | bug report                                                       |
|---------------+------+---------------+------------------------------------------------------------------|
| 54d55bba      | typo | segment fault | http://lists.gnu.org/archive/html/bug-grep/2010-03/msg00477.html |


Patch
#+BEGIN_SRC diff
diff --git a/lib/savedir.c b/lib/savedir.c
index 91fd77b..94e5f12 100644
--- a/lib/savedir.c
+++ b/lib/savedir.c
@@ -48,7 +48,7 @@ isdir1 (const char *dir, const char *file)
   size_t dirlen = strlen (dir);
   size_t filelen = strlen (file);
 
-  while (dirlen && path[dirlen - 1] == '/')
+  while (dirlen && dir[dirlen - 1] == '/')
     dirlen--;
 
   if ((dirlen + filelen + 2) > pathlen)
#+END_SRC

Test script
#+BEGIN_SRC diff
diff --git a/tests/include-exclude b/tests/include-exclude
new file mode 100644
index 0000000..e77c126
--- a/dev/null
+++ b/tests/include-exclude
@@ -0,0 +1,32 @@
+#!/bin/sh
+# Use of any --include or --exclude* option would segfault in 2.6 and 2.6.1
+: ${srcdir=.}
+. "$srcdir/init.sh"; path_prepend_ ../src
+
+mkdir -p x/dir || framework_failure_
+echo a > x/a || framework_failure_
+echo b > x/b || framework_failure_
+echo d > x/dir/d || framework_failure_
+
+printf '%s\n' x/b:b x/dir/d:d > exp-not-a   || framework_failure_
+printf '%s\n'       x/dir/d:d > exp-not-ab  || framework_failure_
+printf '%s\n' x/a:a x/b:b     > exp-not-d   || framework_failure_
+printf '%s\n' x/a:a x/b:b     > exp-not-dir || framework_failure_
+
+grep -r --exclude='a*'    . x > out || fail=1
+sort out > k && mv k out
+compare out exp-not-a || fail=1
+
+grep -r --exclude='[ab]'  . x > out || fail=1
+sort out > k && mv k out
+compare out exp-not-ab || fail=1
+
+grep -r --exclude='*d'    . x > out || fail=1
+sort out > k && mv k out
+compare out exp-not-d || fail=1
+
+grep -r --exclude-dir=dir . x > out || fail=1
+sort out > k && mv k out
+compare out exp-not-dir || fail=1
+
+Exit $fail
#+END_SRC

The callgraph:
#+BEGIN_SRC dot
savedir -> isdir1;
grepdir -> savedir;

grep -> grepdir;
grepfile -> grepdir;

grepfile -> grep;
grepdir -> grepfile;
grep -> grepdir;

main -> grepfile;
#+END_SRC

It is still too complicated.

* make
There's no interesting bugs at all.
